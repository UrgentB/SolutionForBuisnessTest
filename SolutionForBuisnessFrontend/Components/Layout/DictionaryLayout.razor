@using Blazored.Toast.Configuration
@using SolutionForBuisnessFrontend.Components.Crutch
@using SolutionForBuisnessFrontend.Components.Models
@using SolutionForBuisnessFrontend.Components.Models.Commands
@using SolutionForBuisnessFrontend.Components.Service.Repository
@typeparam TDictionary where TDictionary : DictionaryEntry
@inject IToastService toastService
@inject IRepository<TDictionary, string, DictionaryPatchCommand> repos;
@attribute [type: RenderModeInteractiveServer]


<h3>@DictionaryName</h3>


@if (loading)
{
    <div>Загрузка</div>
}
else
{
    @switch (pageMode)
    {
        case PageMode.View:
            <div>
                <button @onclick="() => pageMode = PageMode.Add">Добавить</button>
                <button @onclick="() => activeEntries = !activeEntries">@arhiveActiveButtonLabel</button>
            </div>
            <table class="table">
                <thead>
                <tr>
                    <th>Наименование</th>
                </tr>
                </thead>
                @foreach (var entry in list)
                {
                    @if (activeEntries == entry.Active)
                    {
                        <tr>
                            <td @onclick="() => 
                                { 
                                    pageMode = PageMode.Edit; 
                                    patchCommand = new DictionaryPatchCommand() { Id = entry.Id, Name = entry.Name }; deleteCommand = entry.Id; 
                                }">
                                @entry.Name
                            </td>
                        </tr>
                    }
                }
            </table>
            break;
        case PageMode.Add:
            <button @onclick="() => 
                    { 
                        pageMode = PageMode.View; AddAsync(); 
                        postCommand = string.Empty; 
                    }">
                Сохранить
            </button>
            <InputText @bind-Value="postCommand"></InputText>
            <button @onclick="() => pageMode = PageMode.View">Назад</button>
            break;
        case PageMode.Edit:
            <button @onclick="() => { pageMode = PageMode.View; ChangeAsync(); }">
                Сохранить
            </button>
            <button @onclick="() => { pageMode = PageMode.View; DeleteAsync(); }">
                Удалить
            </button>
            <InputText @bind-Value="patchCommand.Name"></InputText>
            <button @onclick="() => pageMode = PageMode.View">Назад</button>
            break;
    }
}

<BlazoredToasts Position="ToastPosition.BottomLeft" Timeout="5" />

@code {
    [Parameter]
    public string DictionaryName { get; set; }

    string postCommand;
    Guid deleteCommand;
    DictionaryPatchCommand patchCommand;
    PageMode pageMode = PageMode.View;
    bool activeEntries = true;
    bool loading = true;
    string arhiveActiveButtonLabel => activeEntries ? "К Архиву" : "К Активным";
    List<TDictionary> list;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UpdateAsync();
            loading = false;
        }
        catch (BadHttpRequestException ex)
        {
            ShowToast(ex.Message);
        }
    }

    private async Task UpdateAsync()
    {
        list = (await repos.GetAllAsync()).ToList();
        StateHasChanged();
    }

    private async Task AddAsync()
    {
        try
        {
            if (postCommand != null && postCommand != string.Empty)
            {
                await repos.PostAsync(postCommand);
                await UpdateAsync();
            }
        }
        catch (BadHttpRequestException ex)
        {
            ShowToast(ex.Message);
        }
    }

    private async Task ChangeAsync()
    {
        try
        {
            if (patchCommand.Name != null && patchCommand.Name != string.Empty)
            {
                await repos.PatchAsync(patchCommand);
                await UpdateAsync();
            }
        }
        catch (BadHttpRequestException ex)
        {
            ShowToast(ex.Message);
        }
    }

    private async Task DeleteAsync()
    {
        try
        {
            await repos.DeleteAsync(deleteCommand);
            await UpdateAsync();
        }
        catch (BadHttpRequestException ex)
        {
            ShowToast(ex.Message);
        }
    }

    private void ShowToast(string message)
    {
        toastService.ShowError(message);
    }

    public enum PageMode
    {
        View,
        Edit,
        Add
    }

}
